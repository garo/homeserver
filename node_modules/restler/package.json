{
  "name": "restler",
  "version": "0.2.2",
  "description": "An HTTP client library for node.js",
  "contributors": [
    {
      "name": "Dan Webb",
      "email": "dan@danwebb.net"
    }
  ],
  "homepage": "https://github.com/danwrong/restler",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/restler",
  "engines": {
    "node": ">= 0.3.7"
  },
  "readme": "Restler 0.2.0\n===========\n\n(C) Dan Webb (dan@danwebb.net/@danwrong) 2011, Licensed under the MIT-LICENSE\n\nAn HTTP client library for node.js (0.3 and up).  Hides most of the complexity of creating and using http.Client. Very early days yet.\n\n\nFeatures\n--------\n\n* Easy interface for common operations via http.request\n* Automatic serialization of post data\n* Automatic serialization of query string data\n* Automatic deserialization of XML, JSON and YAML responses to JavaScript objects (if you have js-yaml and/or xml2js in the require path)\n* Provide your own deserialization functions for other datatypes\n* Automatic following of redirects\n* Send files with multipart requests\n* Transparently handle SSL (just specify https in the URL)\n* Deals with basic auth for you, just provide username and password options\n* Simple service wrapper that allows you to easily put together REST API libraries\n    \n    \nAPI\n---\n\n### request(url, options)\n\nBasic method to make a request of any type.  The function returns a RestRequest object\nthat emits events:\n\n* _complete_ emitted when the request has finished whether it was successful or not.  Gets passed the response data and the response as arguments.\n* _success_ emitted when the request was successful.  Gets passed the response data and the response as arguments.\n* _error_ emitted when the request was unsuccessful.  Gets passed the response data and the response as arguments.\n* _2XX, 3XX, 4XX, 5XX etc_ emitted for all requests with response codes in the range.  Eg. 2XX emitted for 200, 201, 203\n* _actual response code_ there is an event emitted for every single response code.  eg.  404, 201, etc.\n\n### get(url, options)\n\nCreate a GET request. \n\n### post(url, options)\n\nCreate a POST request.\n\n### put(url, options)\n\nCreate a PUT request.\n\n### del(url, options)\n\nCreate a DELETE request.\n\n### response parsers\n\nYou can give any of these to the parsers option to specify how the response data is deserialized.\n\n#### parsers.auto\n\nChecks the content-type and then uses parsers.xml, parsers.json or parsers.yaml.  \nIf the content type isn't recognised it just returns the data untouched.\n\n#### parsers.json, parsers.xml, parsers.yaml\n\nAll of these attempt to turn the response into a JavaScript object. In order to use the YAML and XML parsers you must have yaml and/or xml2js installed.\n\n### options hash\n\n* _method_ Request method, can be get, post, put, del\n* _query_ Query string variables as a javascript object, will override the querystring in the URL\n* _data_ The data to be added to the body of the request.  Can be a string or any object. \nNote that if you want your request body to be JSON with the Content-Type `application/json`, you need to \nJSON.stringify your object first. Otherwise, it will be sent as `application/x-www-form-urlencoded` and encoded accordingly.\n* _parser_ A function that will be called on the returned data.  try parsers.auto, parsers.json etc\n* _encoding_ The encoding of the request body.  defaults to utf8\n* _headers_ a hash of HTTP headers to be sent\n* _username_ Basic auth username\n* _password_ Basic auth password\n* _multipart_ If set the data passed will be formated as multipart/form-encoded.  See multipart example below.\n* _client_ A http.Client instance if you want to reuse or implement some kind of connection pooling.\n* _followRedirects_ Does what it says on the tin.\n\n\nExample usage\n-------------\n\n    var sys = require('util'),\n        rest = require('./restler');\n\n    rest.get('http://google.com').on('complete', function(data) {\n      sys.puts(data);\n    });\n\n    rest.get('http://twaud.io/api/v1/users/danwrong.json').on('complete', function(data) {\n      sys.puts(data[0].message); // auto convert to object\n    });\n    \n    rest.get('http://twaud.io/api/v1/users/danwrong.xml').on('complete', function(data) {\n      sys.puts(data[0].sounds[0].sound[0].message); // auto convert to object\n    });\n    \n    rest.post('http://user:pass@service.com/action', {\n      data: { id: 334 },\n    }).on('complete', function(data, response) {\n      if (response.statusCode == 201) {\n        // you can get at the raw response like this...\n      }\n    });\n    \n    // multipart request sending a file and using https\n    rest.post('https://twaud.io/api/v1/upload.json', {\n      multipart: true,\n      username: 'danwrong',\n      password: 'wouldntyouliketoknow',\n      data: {\n        'sound[message]': 'hello from restler!',\n        'sound[file]': rest.file('doug-e-fresh_the-show.mp3', 'audio/mpeg')\n      }\n    }).on('complete', function(data) {\n      sys.puts(data.audio_url);\n    });\n    \n    // create a service constructor for very easy API wrappers a la HTTParty...\n    Twitter = rest.service(function(u, p) {\n      this.defaults.username = u;\n      this.defaults.password = p;\n    }, {\n      baseURL: 'http://twitter.com'\n    }, {\n      update: function(message) {\n        return this.post('/statuses/update.json', { data: { status: message } });\n      }\n    });\n    \n    var client = new Twitter('danwrong', 'password');\n    client.update('Tweeting using a Restler service thingy').on('complete', function(data) {\n      sys.p(data);\n    });\n\n    // the JSON post\n    rest.post('http://example.com/action', {\n      data: JSON.stringify({ id: 334 }),\n    }).on('complete', function(data, response) {\n      // you can get at the raw response like this...\n    });\n\n    \nRunning the tests\n-----------------\n\n    node test/restler.js \n    \nTODO\n----\n* Deal with no utf-8 response bodies\n* What do you need? Let me know or fork.\n",
  "readmeFilename": "README.md",
  "_id": "restler@0.2.2",
  "_from": "restler@0.2.2"
}
